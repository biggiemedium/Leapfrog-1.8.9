
// For those who want the bleeding edge
buildscript {
    repositories {
        jcenter()
        //maven { url = 'https://sizableshrimp.me/maven' }

        maven {
            name = "forge"
            url = "https://files.minecraftforge.net/maven"
        }

        maven {
            name = 'spongepowered-repo'
            url = 'https://repo.spongepowered.org/maven/'
        }
    }
    dependencies {
        classpath 'com.github.jengelman.gradle.plugins:shadow:1.2.3'
        classpath 'org.spongepowered:mixingradle:0.6-SNAPSHOT'
        classpath 'net.minecraftforge.gradle:ForgeGradle:2.1-SNAPSHOT'
    }
}
apply plugin: 'net.minecraftforge.gradle.forge'
apply plugin: 'com.github.johnrengelman.shadow'
apply plugin: 'org.spongepowered.mixin'

version = "Release"
group= "dev.px.leapfrog" // http://maven.apache.org/guides/mini/guide-naming-conventions.html
archivesBaseName = "LeapFrog"

repositories {
    maven {
        name = "jitpack.io"
        url = "https://jitpack.io"
    }

    maven {
        name = 'spongepowered-repo'
        url = 'https://repo.spongepowered.org/maven/'
    }
    mavenCentral()
    jcenter()
}

//sourceCompatibility = JavaVersion.VERSION_1_8
//targetCompatibility = JavaVersion.VERSION_1_8
sourceCompatibility = targetCompatibility = JavaVersion.VERSION_1_8
compileJava {
    sourceCompatibility = targetCompatibility = JavaVersion.VERSION_1_8
    //compileJava.options.encoding = 'UTF-8'
}

minecraft {
    version = "1.8.9-11.15.1.2318-1.8.9"
    runDir = "run"
    coreMod = "dev.px.leapfrog.ASM.Loader"
    mappings = "stable_20"
    makeObfSourceJar = false
}

runClient {
    jvmArgs("-Ddevauth.enabled=true")
    jvmArgs("-Ddevauth.configDir=C:\\Users\\James\\Devauth")
    jvmArgs("-Ddevauth.account=main")
}

reobf {
    shadowJar {
        mappingType = 'SEARGE'
        classpath = sourceSets.main.compileClasspath
    }
}

runClient {
    jvmArgs("-DSPOTIFY_API_DEBUG")
}

dependencies {
    compile("org.spongepowered:mixin:0.7.11-SNAPSHOT") {
        exclude module: 'launchwrapper'
        exclude module: 'gson'
        exclude module: 'guava'
        exclude module: 'commons-io'
    }
    compile group: 'net.jodah', name: 'typetools', version: '0.5.0'
    compile "com.github.biggiemedium:Alpine:1.9"
    compile('club.minnced:java-discord-rpc:2.0.2') {
        exclude module: 'jna'
    }
    // Gradle does not work, just use the jar file for simplicity
    compile fileTree(dir: "libs", include: "java-spotify-api-1.2.0-all.jar")
}

shadowJar {
    dependencies {
        include(dependency('com.github.biggiemedium:Alpine'))
        include(dependency('club.minnced:java-discord-rpc'))
        include(dependency('org.spongepowered:mixin'))
        include(dependency('net.jodah:typetools'))
    }
    from(fileTree('libs').include('java-spotify-api-1.2.0-all.jar'))
    exclude 'dummyThing'
    exclude 'LICENSE.txt'
    classifier = 'release'
}

mixin {
    defaultObfuscationEnv searge
    add sourceSets.main, 'mixins.leapfrog.refmap.json'
}


reobf {
    shadowJar {
        mappingType = 'SEARGE'
        classpath = sourceSets.main.compileClasspath
    }
}

processResources {
    // this will ensure that this task is redone when the versions change.
    inputs.property "version", project.version
    inputs.property "mcversion", project.minecraft.version

    // replace stuff in mcmod.info, nothing else
    from(sourceSets.main.resources.srcDirs) {
        include 'mcmod.info'

        // replace version and mcversion
        expand 'version':project.version, 'mcversion':project.minecraft.version
    }

    // copy everything else, thats not the mcmod.info
    from(sourceSets.main.resources.srcDirs) {
        exclude 'mcmod.info'
    }

    // move _at.cfg into META-INF
    rename '(.+_at.cfg)', 'META-INF/$1'
}

//jar {
//    manifest {
//        attributes(
//                'MixinConfigs': 'mixins.leapfrog.json',
//                'tweakClass': 'org.spongepowered.asm.launch.MixinTweaker',
//                'TweakOrder': 0,
//                'FMLCorePluginContainsFMLMod': 'true',
//                'FMLCorePlugin': 'dev.px.leapfrog.ASM.Loader',
//                'ForceLoadAsMod': 'true',
//                'FMLAT': 'leapfrog_at.cfg'
//        )
//    }
//}
//
//build.dependsOn(shadowJar)



